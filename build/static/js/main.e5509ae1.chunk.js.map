{"version":3,"sources":["services/boardService.js","cmps/Relation.js","cmps/Loader.js","views/RelationController.js","services/mondayService.js","views/Login.js","App.js","serviceWorker.js","index.js"],"names":["require","config","jwt","monday","mondaySdk","console","log","process","CLIENT_ID","domain","userId","a","axios","post","boardRelations","mainBoard","subBoards","update","id","boardId","columnId","endpoint","mutation","JSON","stringify","api","boardIds","res","_id","delete","getUserBoards","add","decrypt","token","SIGNING_SECRET","decryptedToken","verify","Relation","relation","boards","boardNames","deleteRelation","useState","board","value","label","column","boardRelation","setBoardRelation","setMainBoardColumns","useEffect","addBoardsNames","getMainBoardColumns","query","columns","data","forEach","type","push","title","editRelation","simpSubBoards","map","sub","Number","boardService","object","tempRelation","subBoard","filter","onSetRelation","kind","newBoards","newRelation","className","placeholder","options","defaultValue","onChange","isMulti","onClick","Loader","src","RelationController","context","setBoards","fatherBoard","setFatherBoard","fatherBoardColumns","setFatherBoardColumns","childBoards","setChildBoards","relations","setRelations","loading","SetLoading","getContext","getBoardRelations","labeledBoards","name","getFatherBoardColumns","addBoardsRelations","subIds","createNewItemWebHook","createMirrorWebHook","filteredRelations","dropdown","onSetFatherBoard","length","i","key","email","toLowerCase","get","user","getUserByEmail","getUserToken","Login","slug","userEmail","oAuthLogin","mondayService","App","setContext","setSlug","setUserId","setUserEmail","getSlug","contextData","users","account","exact","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5509ae1.chunk.js","sourcesContent":["import mondaySdk from \"monday-sdk-js\";\r\nimport axios from \"axios\";\r\nrequire(\"dotenv\").config();\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst monday = mondaySdk();\r\n\r\nconsole.log(`process.env`, process.env.CLIENT_ID);\r\n// \"https://7ab5-2a0e-9cc0-2411-3000-7912-989f-c26e-17ae.ngrok.io\";\r\nconst domain =\r\n  \"https://d614-2a0e-9cc0-23d9-5700-9dc2-3d75-1056-3a26.eu.ngrok.io\";\r\n// process.env.NODE_ENV === \"production\"\r\n//   ? \"https://create-group-integration.herokuapp.com\"\r\n//   : \"http://localhost:3030\";\r\n\r\nasync function getUserBoards(userId) {\r\n  console.log(`getUserBoards -> userId`, userId);\r\n  console.log(`getUserBoards -> `, `${domain}/getUserBoards`);\r\n  const boardRelations = await axios.post(`${domain}/getUserBoards`, {\r\n    userId,\r\n  });\r\n  return boardRelations;\r\n}\r\nasync function add(mainBoard, subBoards, userId) {\r\n  await axios.post(`${domain}/add`, { mainBoard, subBoards, userId });\r\n  return { mainBoard, subBoards, userId };\r\n}\r\nasync function update(mainBoard, subBoards, userId, id) {\r\n  console.log(\r\n    `update -> mainBoard, subBoards, userId, id`,\r\n    mainBoard,\r\n    subBoards,\r\n    userId,\r\n    id\r\n  );\r\n  await axios.post(`${domain}/update`, { mainBoard, subBoards, userId, id });\r\n  return { mainBoard, subBoards, userId, id };\r\n}\r\nasync function createNewItemWebHook(\r\n  boardId,\r\n  columnId,\r\n  endpoint = \"createGroup\"\r\n) {\r\n  const mutation = `\r\n  mutation{\r\n    create_webhook (board_id:${boardId}, url:${JSON.stringify(\r\n    domain + \"/\" + endpoint\r\n  )}, event:change_specific_column_value, config: ${JSON.stringify(\r\n    JSON.stringify({\r\n      columnId: columnId,\r\n    })\r\n  )}){\r\n      id\r\n      board_id\r\n    }\r\n  }`;\r\n  const res = await monday.api(mutation);\r\n}\r\nasync function createMirrorWebHook(boardIds, endpoint = \"mirrorItemKR\") {\r\n  console.log(`createMirrorWebHook -> boardIds`, boardIds);\r\n  const mutation = `mutation{\r\n    create_webhook (board_id:${boardIds}, url:${JSON.stringify(\r\n    domain + \"/\" + endpoint\r\n  )}, event:create_item){\r\n      id\r\n      board_id\r\n    }\r\n  }`;\r\n  console.log(`createMirrorWebHook -> mutation`, mutation);\r\n  const res = await monday.api(mutation);\r\n  console.log(`createMirrorWebHook -> res`, res);\r\n}\r\nasync function deleteRelation(_id) {\r\n  await axios.delete(`${domain}/deleteRelation/${_id}`);\r\n}\r\nfunction decrypt(token) {\r\n  console.log(\r\n    `decrypt -> process.env.CLIENT_SECRET`,\r\n    process.env.SIGNING_SECRET\r\n  );\r\n  const decryptedToken = jwt.verify(token, \"642b0bb8bc50d1e365e9ba0a07e3dc21\");\r\n  console.log(`decrypt -> decryptedToken`, decryptedToken);\r\n  return decryptedToken;\r\n}\r\n\r\nexport default {\r\n  getUserBoards,\r\n  add,\r\n  update,\r\n  decrypt,\r\n  update,\r\n  createNewItemWebHook,\r\n  createMirrorWebHook,\r\n  deleteRelation,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport boardService from \"../services/boardService\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nconst monday = mondaySdk();\r\n\r\nexport default function Relation({\r\n  relation,\r\n  boards,\r\n  boardNames,\r\n  userId,\r\n  deleteRelation,\r\n}) {\r\n  const [boardRelation, setBoardRelation] = useState({\r\n    mainBoard: {\r\n      board: { value: 0, label: \"\" },\r\n      column: { value: \"\", label: \"\" },\r\n    },\r\n    subBoards: [],\r\n    userId,\r\n    _id: relation._id,\r\n  });\r\n  const [mainBoardColumns, setMainBoardColumns] = useState();\r\n  // console.log(`Relation -> boardRelationId`, boardRelation._id);\r\n\r\n  useEffect(() => {\r\n    addBoardsNames();\r\n  }, []);\r\n  const getMainBoardColumns = async (boardId) => {\r\n    const query = `query{\r\n      boards(ids:${boardId}){\r\n        columns{\r\n          type\r\n          title\r\n          id\r\n        }\r\n      }\r\n    }`;\r\n    const res = await monday.api(query);\r\n    const columns = [];\r\n    let columnData = res.data.boards[0].columns?.forEach((column) => {\r\n      if (column.type === \"dropdown\")\r\n        columns.push({ value: column.id, label: column.title });\r\n      // return (arr[i] = { value: column.id, label: column.title });\r\n    });\r\n    setMainBoardColumns(columns);\r\n    // const formattedColumns = columns.forEach(column);\r\n    // console.log(`getFatherBoardColumns -> columns`, columns);\r\n  };\r\n\r\n  const editRelation = async () => {\r\n    const simpSubBoards = boardRelation.subBoards.map((sub) =>\r\n      Number(sub.value)\r\n    );\r\n    const res = await boardService.update(\r\n      boardRelation.mainBoard,\r\n      simpSubBoards,\r\n      userId,\r\n      boardRelation._id\r\n    );\r\n    // setBoardRelation(res);\r\n    addBoardsNames(res);\r\n  };\r\n  const addBoardsNames = (object = relation) => {\r\n    const tempRelation = {\r\n      mainBoard: {\r\n        board: { value: 0, label: \"\" },\r\n        column: { value: \"\", label: \"\" },\r\n      },\r\n      subBoards: [],\r\n      _id: relation._id,\r\n      userId: boardRelation.userId,\r\n    };\r\n    tempRelation.mainBoard = object.mainBoard;\r\n    tempRelation.subBoards = object?.subBoards.map(\r\n      (subBoard) =>\r\n        boards?.filter((board) => Number(board.value) === subBoard)[0]\r\n    );\r\n\r\n    console.log(`addBoardsNames -> tempRelation`, tempRelation);\r\n    setBoardRelation(tempRelation);\r\n  };\r\n  const onSetRelation = (kind, newBoards) => {\r\n    console.log(`onSetRelation -> newBoards`, newBoards);\r\n    // console.log(`onSetRelation -> userId`, userId);\r\n    // console.log(`onSetRelation -> newBoards`, newBoards);\r\n    let newRelation = {\r\n      userId: userId,\r\n      mainBoard: boardRelation.mainBoard,\r\n      subBoards: boardRelation.subBoards,\r\n      _id: relation._id,\r\n    };\r\n    console.log(`onSetRelation -> boardRelation`, boardRelation);\r\n    console.log(`onSetRelation -> newRelation`, newRelation);\r\n    if (kind === \"sub\") {\r\n      newRelation.subBoards = newBoards;\r\n    } else {\r\n      newRelation.mainBoard.board = newBoards;\r\n    }\r\n    setBoardRelation(newRelation);\r\n    getMainBoardColumns(newRelation.mainBoard.board.value);\r\n    // console.log(`onSetRelation -> newRelation`, newRelation);\r\n  };\r\n\r\n  return (\r\n    // <div className=\"relation\">\r\n    <div className=\"content\">\r\n      <Select\r\n        placeholder=\"Choose a main board\"\r\n        value={boardRelation.mainBoard?.board}\r\n        options={boardNames}\r\n        defaultValue={boardRelation.mainBoard?.board}\r\n        // isDisabled={edit}\r\n        onChange={(boards) => onSetRelation(\"main\", boards)}\r\n      />\r\n      <Select\r\n        placeholder=\"Choose a dropdown\"\r\n        value={boardRelation.mainBoard?.column}\r\n        // options={boardNames}\r\n        defaultValue={boardRelation.mainBoard?.column}\r\n        // isDisabled={edit}\r\n        onChange={(boards) => onSetRelation(\"main\", boards)}\r\n      />\r\n      <Select\r\n        isMulti\r\n        placeholder=\"Choose sub boards\"\r\n        value={boardRelation.subBoards}\r\n        options={boardNames}\r\n        defaultValue={boardRelation.subBoards}\r\n        onChange={(boards) => onSetRelation(\"sub\", boards)}\r\n      />\r\n      <button className=\"add-button\" onClick={editRelation}>\r\n        Update\r\n      </button>\r\n      <button\r\n        className=\"add-button\"\r\n        onClick={() => deleteRelation(relation._id)}\r\n      >\r\n        delete\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div>\r\n      <img\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/c/c7/Loading_2.gif\"\r\n        className=\"loader\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"../App.css\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport \"monday-ui-react-core/dist/main.css\";\r\nimport boardService from \"../services/boardService\";\r\nimport Select from \"react-select\";\r\nimport Relation from \"../cmps/Relation\";\r\nimport Loader from \"../cmps/Loader\";\r\n\r\n//Explore more Monday React Components here: https://style.monday.com/\r\n// import AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\";\r\n// import Button from \"monday-ui-react-core/dist/Button.js\";\r\n// import MenuButton from \"monday-ui-react-core/dist/MenuButton.js\";\r\n// import { FontIcon } from \"office-ui-fabric-react/lib/Icon\";\r\n\r\nconst monday = mondaySdk();\r\n\r\n// export default function RelationController({ context }) {\r\nexport default function RelationController({ context, userId }) {\r\n  const [boards, setBoards] = useState();\r\n  const [fatherBoard, setFatherBoard] = useState({});\r\n  const [fatherBoardColumns, setFatherBoardColumns] = useState();\r\n  const [childBoards, setChildBoards] = useState([]);\r\n  // const [userId, setUserId] = useState();\r\n  const [relations, setRelations] = useState([]);\r\n  const [loading, SetLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getContext();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    userId && boards && getBoardRelations();\r\n  }, [userId, boards]);\r\n  // useEffect(() => {}, []);\r\n  const getContext = async () => {\r\n    // console.log(\"hi\");\r\n    // const context = await monday.get(\"context\");\r\n    // // setContext(contextData?.data);\r\n    // // console.log(`getContext -> context`, contextData);\r\n    // const token = await monday.get(\"sessionToken\");\r\n    // console.log(`getContext -> context`, context);\r\n\r\n    try {\r\n      const query = `query{\r\n        boards(limit:2000){\r\n          id\r\n          name\r\n        }\r\n      }`;\r\n      const res = await monday.api(query);\r\n      // console.log(`getContext -> res`, res.data);\r\n      const labeledBoards = res?.data?.boards?.map((board) => {\r\n        return { value: board.id, label: board.name };\r\n      });\r\n      // console.log(`labeledBoards -> labeledBoards`, labeledBoards);\r\n      setBoards(labeledBoards);\r\n    } catch (err) {\r\n      console.log(`getContext -> err`, err);\r\n    }\r\n  };\r\n  const getFatherBoardColumns = async (boardId) => {\r\n    const query = `query{\r\n      boards(ids:${boardId}){\r\n        columns{\r\n          type\r\n          title\r\n          id\r\n        }\r\n      }\r\n    }`;\r\n    const res = await monday.api(query);\r\n    // console.log(`getFatherBoardColumns -> res`, res);\r\n\r\n    const columns = [];\r\n    let columnData = res.data.boards[0].columns?.forEach((column) => {\r\n      if (column.type === \"dropdown\")\r\n        columns.push({ value: column.id, label: column.title });\r\n      // return (arr[i] = { value: column.id, label: column.title });\r\n    });\r\n    setFatherBoardColumns(columns);\r\n    // const formattedColumns = columns.forEach(column);\r\n    // console.log(`getFatherBoardColumns -> columns`, columns);\r\n  };\r\n  const getBoardRelations = async () => {\r\n    const boardRelations = await boardService.getUserBoards(userId);\r\n    console.log(`getBoardRelations -> boardRelations`, boardRelations);\r\n    setRelations(boardRelations?.data);\r\n    SetLoading(false);\r\n  };\r\n\r\n  const onSetFatherBoard = (board) => {\r\n    const dropdown = getFatherBoardColumns(board.value);\r\n    setFatherBoard({ board: board, column: dropdown });\r\n  };\r\n\r\n  const onSetChildBoards = (chosenBoards) => {\r\n    setChildBoards(chosenBoards);\r\n  };\r\n  const addBoardsRelations = async () => {\r\n    const subIds = childBoards.map((board) => Number(board.value));\r\n\r\n    const newRelation = await boardService.add(fatherBoard, subIds, userId);\r\n    // console.log(`addBoardsRelations -> newRelation`, newRelation);\r\n\r\n    // console.log(`addBoardsRelations -> fatherBoard`, fatherBoard);\r\n    const res2 = await boardService.createNewItemWebHook(\r\n      Number(fatherBoard.board.value),\r\n      fatherBoard.column.value\r\n    );\r\n    const subBoards = childBoards.map((board) => board.value);\r\n    const res = subBoards?.forEach(\r\n      async (board) => await boardService.createMirrorWebHook(board)\r\n    );\r\n    // console.log(`addBoardsRelations -> res`, res);\r\n    // console.log(`addBoardsRelations -> res`, res);\r\n    // console.log(`addBoardsRelations -> res2`, res2);\r\n    setRelations([...relations, newRelation]);\r\n    setFatherBoard();\r\n    setChildBoards();\r\n  };\r\n\r\n  // const fatherBoardName = {\r\n  //   value: fatherBoard?.value,\r\n  //   label: fatherBoard?.label || \"Choose a main board\",\r\n  // };\r\n  const boardNames = boards?.filter(\r\n    (board) => board?.value !== fatherBoard?.board?.value\r\n  );\r\n  // console.log(`App -> boardNames`, boardNames);\r\n  // const childBoardNames = childBoards?.filter((child) => {\r\n  //   return { label: child.name, value: child.id };\r\n  // });\r\n  const deleteRelation = async (_id) => {\r\n    console.log(`deleteRelation -> _id`, _id);\r\n    await boardService.deleteRelation(_id);\r\n    const filteredRelations = relations.filter(\r\n      (relation) => relation._id !== _id\r\n    );\r\n    console.log(`deleteRelation -> filteredRelations`, filteredRelations);\r\n    setRelations(filteredRelations);\r\n  };\r\n  return (\r\n    <div className=\"relation-controller\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        // context && (\r\n        <>\r\n          <div className=\"content new\">\r\n            <h1>Create new relation</h1>\r\n            {boards && (\r\n              <div>\r\n                <Select\r\n                  placeholder=\"Choose a main board\"\r\n                  value={fatherBoard?.board}\r\n                  options={boardNames}\r\n                  onChange={(board) => onSetFatherBoard(board)}\r\n                />\r\n                <Select\r\n                  placeholder=\"Choose a dropdown\"\r\n                  options={fatherBoardColumns}\r\n                  value={fatherBoard?.column}\r\n                  onChange={(column) =>\r\n                    setFatherBoard({ ...fatherBoard, column })\r\n                  }\r\n                />\r\n                <Select\r\n                  isMulti\r\n                  placeholder=\"Choose sub boards\"\r\n                  value={childBoards}\r\n                  options={boardNames}\r\n                  onChange={(board) => onSetChildBoards(board)}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <button className=\"add-button\" onClick={addBoardsRelations}>\r\n              Add boards relation\r\n            </button>\r\n          </div>\r\n          {/* <button onClick={addBoardsNames}>names</button> */}\r\n          <div className=\"edit-boards\">\r\n            {relations.length > 0 && <h1> edit existing relations</h1>}\r\n            {relations &&\r\n              relations?.map((relation, i) => (\r\n                <Relation\r\n                  deleteRelation={deleteRelation}\r\n                  key={i}\r\n                  relation={relation}\r\n                  boardNames={boardNames}\r\n                  boards={boards}\r\n                  userId={userId}\r\n                />\r\n              ))}\r\n          </div>\r\n        </>\r\n        // )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nconst domain =\r\n  \"https://d614-2a0e-9cc0-23d9-5700-9dc2-3d75-1056-3a26.eu.ngrok.io\";\r\n// process.env.NODE_ENV === \"production\"\r\n//   ? \"https://create-group-integration.herokuapp.com\"\r\n//   : \"http://localhost:3030\";\r\n\r\n/**\r\n *\r\n * @param {string} email\r\n * @returns {object} user\r\n */\r\nasync function getUserByEmail(email) {\r\n  email = email.toLowerCase();\r\n  const user = await axios.get(`${domain}/users/${email}`);\r\n  return user;\r\n}\r\nasync function getUserToken(email) {\r\n  await axios.get(`${domain}/api/auth/authorization/${email}`);\r\n}\r\nexport default {\r\n  getUserByEmail,\r\n  getUserToken,\r\n};\r\n","import React from \"react\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport mondayService from \"../services/mondayService\";\r\nrequire(\"dotenv\").config();\r\n// import axios from \"axios\";\r\nconst monday = mondaySdk();\r\nexport default function Login({ context, slug, userEmail }) {\r\n  console.log(`Login -> slug`, slug);\r\n  console.log(`oAuthLogin -> process.env.CLIENT_ID`, process.env.CLIENT_ID);\r\n  const oAuthLogin = async () => {\r\n    await mondayService.getUserToken(userEmail);\r\n  };\r\n  console.log(`Login -> context`, context);\r\n  return (\r\n    <div className=\"login\">\r\n      <button onClick={oAuthLogin}>click me</button>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport React, { lazy, useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport RelationController from \"./views/RelationController\";\r\nimport Login from \"./views/Login\";\r\nconst monday = mondaySdk();\r\n// const RelationController = lazy(() => import(\"./cmps/RelationController\"));\r\n\r\nexport default function App() {\r\n  const [context, setContext] = useState();\r\n  const [slug, setSlug] = useState();\r\n  const [userId, setUserId] = useState();\r\n  const [userEmail, setUserEmail] = useState();\r\n  useEffect(() => {\r\n    getContext();\r\n  }, []);\r\n  useEffect(() => {\r\n    context && setUserId(Number(context?.user?.id));\r\n  }, [context]);\r\n  useEffect(() => {\r\n    userId && getSlug();\r\n  }, [userId]);\r\n  const getContext = async () => {\r\n    const contextData = await monday.get(\"context\");\r\n    setContext(contextData?.data);\r\n    console.log(`getContext -> contextData`, contextData);\r\n\r\n    // console.log(`getContext -> umber(context?.user?.id)`, Number(context));\r\n    // console.log(`getContext -> context?.user?.id`, context?.user?.id);\r\n    // // const token = await monday.get(\"sessionToken\");\r\n    // // console.log(`getContext -> token`, token);\r\n  };\r\n\r\n  const getSlug = async () => {\r\n    const query = `\r\n    query{\r\n      users(ids:${userId}){\r\n        email\r\n        account{\r\n          slug\r\n        }\r\n      }\r\n    }`;\r\n    console.log(`getSlug -> query`, query);\r\n    const res = await monday.api(query);\r\n    setUserEmail(res.data.users[0].email);\r\n    setSlug(res.data.users[0].account.slug);\r\n    console.log(\r\n      `getContext -> res.data.users[0].account.slug`,\r\n      res.data.users[0].account.slug\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      {/* {context ? ( */}\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route\r\n            exact\r\n            path=\"/controller\"\r\n            element={<RelationController context={context} />}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            element={\r\n              <Login context={context} slug={slug} userEmail={userEmail} />\r\n            }\r\n          />\r\n        </Routes>\r\n      </BrowserRouter>\r\n      {/* ) : (\r\n        <p>dsaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p>\r\n      )} */}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}