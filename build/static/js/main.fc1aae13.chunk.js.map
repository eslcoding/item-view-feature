{"version":3,"sources":["services/boardService.js","cmps/Relation.js","cmps/Loader.js","App.js","serviceWorker.js","index.js"],"names":["require","config","jwt","domain","userId","a","console","log","axios","post","boardRelations","mainBoard","subBoards","update","id","getUserBoards","add","decrypt","token","process","SIGNING_SECRET","decryptedToken","verify","Relation","relation","boards","boardNames","useState","value","label","_id","boardRelation","setBoardRelation","useEffect","addBoardsNames","editRelation","simpSubBoards","map","sub","Number","boardService","res","object","tempRelation","filter","board","subBoard","onSetRelation","kind","newBoards","newRelation","className","placeholder","options","defaultValue","onChange","isMulti","onClick","Loader","src","monday","mondaySdk","App","setBoards","fatherBoard","setFatherBoard","childBoards","setChildBoards","setUserId","relations","setRelations","loading","SetLoading","getContext","getBoard","getBoardRelations","get","context","data","user","api","labeledBoards","name","find","addBoardsRelations","subIds","onSetFatherBoard","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gpBACAA,EAAQ,KAAUC,SAClB,IAAMC,EAAMF,EAAQ,KAGdG,EAEA,iD,4CAGN,WAA6BC,GAA7B,eAAAC,EAAA,6DACEC,QAAQC,IAAR,0BAAuCH,GACvCE,QAAQC,IAAR,8BAAoCJ,EAApC,mBAFF,SAG+BK,IAAMC,KAAN,UAAcN,EAAd,kBAAsC,CACjEC,WAJJ,cAGQM,EAHR,yBAMSA,GANT,4C,kEASA,WAAmBC,EAAWC,EAAWR,GAAzC,SAAAC,EAAA,sEACQG,IAAMC,KAAN,UAAcN,EAAd,QAA4B,CAAEQ,YAAWC,YAAWR,WAD5D,gCAES,CAAEO,YAAWC,YAAWR,WAFjC,4C,+BAIeS,E,oFAAf,WAAsBF,EAAWC,EAAWR,EAAQU,GAApD,SAAAT,EAAA,6DACEC,QAAQC,IAAR,6CAEEI,EACAC,EACAR,EACAU,GANJ,SAQQN,IAAMC,KAAN,UAAcN,EAAd,WAA+B,CAAEQ,YAAWC,YAAWR,SAAQU,OARvE,gCASS,CAAEH,YAAWC,YAAWR,SAAQU,OATzC,4C,sBAoBe,mBACbC,c,4CACAC,I,gDACAH,SACAI,QAbF,SAAiBC,GACfZ,QAAQC,IAAR,uCAEEY,mHAAYC,gBAEd,IAAMC,EAAiBnB,EAAIoB,OAAOJ,EAAO,oCAEzC,OADAZ,QAAQC,IAAR,4BAAyCc,GAClCA,IAET,SAKER,G,QC5Ca,SAASU,EAAT,GAA6D,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,WAAYtB,EAAU,EAAVA,OAAU,EAG/BuB,mBAAS,CACjDhB,UAAW,CAAEiB,MAAO,EAAGC,MAAO,IAC9BjB,UAAW,GACXR,SACA0B,IAAKN,EAASM,MAPyD,mBAGlEC,EAHkE,KAGnDC,EAHmD,KAWzEC,qBAAU,WACRC,MACC,IACH,IAAMC,EAAY,uCAAG,8BAAA9B,EAAA,6DACb+B,EAAgBL,EAAcnB,UAAUyB,KAAI,SAACC,GAAD,OAChDC,OAAOD,EAAIV,UAFM,SAIDY,EAAa3B,OAC7B0B,OAAOR,EAAcpB,UAAUiB,OAC/BQ,EACAhC,EACA2B,EAAcD,KARG,OAIbW,EAJa,OAWnBP,EAAeO,GAXI,2CAAH,qDAaZP,EAAiB,WAAwB,IAAvBQ,EAAsB,uDAAblB,EACzBmB,EAAe,CACnBhC,UAAW,CAAEiB,MAAO,EAAGC,MAAO,IAC9BjB,UAAW,GACXkB,IAAKN,EAASM,IACd1B,OAAQ2B,EAAc3B,QAExBuC,EAAahC,UAAb,OAAyBc,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAQmB,QAC/B,SAACC,GAAD,OAAWA,EAAMjB,OAASc,EAAO/B,aACjC,GACFgC,EAAa/B,UAAb,OAAyB8B,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAQ9B,UAAUyB,KACzC,SAACS,GAAD,cACErB,QADF,IACEA,OADF,EACEA,EAAQmB,QAAO,SAACC,GAAD,OAAWN,OAAOM,EAAMjB,SAAWkB,KAAU,MAIhEd,EAAiBW,IAEbI,EAAgB,SAACC,EAAMC,GAG3B,IAAIC,EAAc,CAChB9C,OAAQA,EACRO,UAAWoB,EAAcpB,UACzBC,UAAWmB,EAAcnB,UACzBkB,IAAKN,EAASM,KAEH,QAATkB,EACFE,EAAYtC,UAAYqC,EAExBC,EAAYvC,UAAYsC,EAE1BjB,EAAiBkB,IAInB,OAEE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CACEC,YAAY,sBACZxB,MAAOG,EAAcpB,UACrB0C,QAAS3B,EACT4B,aAAcvB,EAAcpB,UAE5B4C,SAAU,SAAC9B,GAAD,OAAYsB,EAAc,OAAQtB,MAE9C,kBAAC,IAAD,CACE+B,SAAO,EACPJ,YAAY,oBACZxB,MAAOG,EAAcnB,UACrByC,QAAS3B,EACT4B,aAAcvB,EAAcnB,UAC5B2C,SAAU,SAAC9B,GAAD,OAAYsB,EAAc,MAAOtB,MAE7C,4BAAQ0B,UAAU,aAAaM,QAAStB,GAAxC,WCpFS,SAASuB,IACtB,OACE,6BACE,yBACEC,IAAI,oEACJR,UAAU,YCSlB,IAAMS,EAASC,MAEA,SAASC,IAAO,IAAD,EACAnC,qBADA,mBACrBF,EADqB,KACbsC,EADa,OAEUpC,qBAFV,mBAErBqC,EAFqB,KAERC,EAFQ,OAGUtC,mBAAS,IAHnB,mBAGrBuC,EAHqB,KAGRC,EAHQ,OAIAxC,qBAJA,mBAIrBvB,EAJqB,KAIbgE,EAJa,OAKMzC,mBAAS,IALf,mBAKrB0C,EALqB,KAKVC,EALU,OAME3C,oBAAS,GANX,mBAMrB4C,EANqB,KAMZC,EANY,KAQ5BvC,qBAAU,WACRwC,MACC,IAEHxC,qBAAU,WACRyC,MACC,CAACV,IACJ/B,qBAAU,WACR7B,GAAUqB,GAAUkD,MACnB,CAACvE,EAAQqB,IAEZ,IAAMgD,EAAU,uCAAG,oCAAApE,EAAA,sEACKuD,EAAOgB,IAAI,WADhB,cACXC,EADW,OAEjBT,EAAU7B,OAAOsC,EAAQC,KAAKC,KAAKjE,KAFlB,0GAUG8C,EAAOoB,IAVV,gGAUTvC,EAVS,OAYTwC,EAZS,OAYOxC,QAZP,IAYOA,GAZP,UAYOA,EAAKqC,YAZZ,iBAYO,EAAWrD,cAZlB,aAYO,EAAmBY,KAAI,SAACQ,GAC5C,MAAO,CAAEjB,MAAOiB,EAAM/B,GAAIe,MAAOgB,EAAMqC,SAGzCnB,EAAUkB,GAhBK,kDAkBf3E,QAAQC,IAAR,0BAlBe,0DAAH,qDAsBVoE,EAAiB,uCAAG,4BAAAtE,EAAA,sEACKmC,EAAazB,cAAcX,GADhC,OAClBM,EADkB,OAGxB4D,EAAY,OAAC5D,QAAD,IAACA,OAAD,EAACA,EAAgBoE,MAC7BN,GAAW,GAJa,2CAAH,qDAMjBE,EAAQ,uCAAG,sBAAArE,EAAA,6DACEoB,QADF,IACEA,OADF,EACEA,EAAQ0D,MAAK,SAACtC,GAAD,OAAWA,EAAMqC,OAASlB,KADzC,2CAAH,qDAWRoB,EAAkB,uCAAG,8BAAA/E,EAAA,6DACnBgF,EAASnB,EAAY7B,KAAI,SAACQ,GAAD,OAAWN,OAAOM,EAAMjB,UAD9B,SAQCY,EAAaxB,IACrCuB,OAAOyB,EAAYpC,OACnByD,EACAjF,GAXuB,OAQnB8C,EARmB,OAazBoB,EAAa,GAAD,mBAAKD,GAAL,CAAgBnB,KAbH,2CAAH,qDAoBlBxB,EAAU,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAQmB,QACzB,SAACC,GAAD,OAAgB,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOjB,UAAP,OAAiBoC,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAapC,UAO3C,OACE,yBAAKuB,UAAU,OACZoB,EACC,kBAACb,EAAD,MAEA,oCACE,yBAAKP,UAAU,WACb,mDACC1B,GACC,6BACE,kBAAC,IAAD,CACE2B,YAAY,sBACZxB,MAAOoC,EACPX,QAAS3B,EACT6B,SAAU,SAACV,GAAD,OAjDD,SAACA,GACxBoB,EAAepB,GAgDoByC,CAAiBzC,MAExC,kBAAC,IAAD,CACEW,SAAO,EACPJ,YAAY,oBACZxB,MAAOsC,EACPb,QAAS3B,EACT6B,SAAU,SAACV,GAnDzBsB,EAmDoDtB,OAK5C,4BAAQM,UAAU,aAAaM,QAAS2B,GAAxC,wBAKF,yBAAKjC,UAAU,eACb,wDACCkB,IAAS,OACRA,QADQ,IACRA,OADQ,EACRA,EAAWhC,KAAI,SAACb,EAAU+D,GAAX,OACb,kBAAChE,EAAD,CACEiE,IAAKD,EACL/D,SAAUA,EACVE,WAAYA,EACZD,OAAQA,EACRrB,OAAQA,WCpINqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnG,QAAQmG,MAAMA,EAAMC,c","file":"static/js/main.fc1aae13.chunk.js","sourcesContent":["import axios from \"axios\";\r\nrequire(\"dotenv\").config();\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\n// \"https://7ab5-2a0e-9cc0-2411-3000-7912-989f-c26e-17ae.ngrok.io\";\r\nconst domain =\r\n  process.env.NODE_ENV === \"production\"\r\n    ? \"https://create-group-integration.herokuapp.com\"\r\n    : \"http://localhost:3030\";\r\n\r\nasync function getUserBoards(userId) {\r\n  console.log(`getUserBoards -> userId`, userId);\r\n  console.log(`getUserBoards -> `, `${domain}/getUserBoards`);\r\n  const boardRelations = await axios.post(`${domain}/getUserBoards`, {\r\n    userId,\r\n  });\r\n  return boardRelations;\r\n}\r\n\r\nasync function add(mainBoard, subBoards, userId) {\r\n  await axios.post(`${domain}/add`, { mainBoard, subBoards, userId });\r\n  return { mainBoard, subBoards, userId };\r\n}\r\nasync function update(mainBoard, subBoards, userId, id) {\r\n  console.log(\r\n    `update -> mainBoard, subBoards, userId, id`,\r\n    mainBoard,\r\n    subBoards,\r\n    userId,\r\n    id\r\n  );\r\n  await axios.post(`${domain}/update`, { mainBoard, subBoards, userId, id });\r\n  return { mainBoard, subBoards, userId, id };\r\n}\r\nfunction decrypt(token) {\r\n  console.log(\r\n    `decrypt -> process.env.CLIENT_SECRET`,\r\n    process.env.SIGNING_SECRET\r\n  );\r\n  const decryptedToken = jwt.verify(token, \"642b0bb8bc50d1e365e9ba0a07e3dc21\");\r\n  console.log(`decrypt -> decryptedToken`, decryptedToken);\r\n  return decryptedToken;\r\n}\r\nexport default {\r\n  getUserBoards,\r\n  add,\r\n  update,\r\n  decrypt,\r\n  update,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport boardService from \"../services/boardService\";\r\n\r\nexport default function Relation({ relation, boards, boardNames, userId }) {\r\n  // console.log(`Relation -> relation`, relation);\r\n  // const [edit, setEdit] = useState(false)\r\n  const [boardRelation, setBoardRelation] = useState({\r\n    mainBoard: { value: 0, label: \"\" },\r\n    subBoards: [],\r\n    userId,\r\n    _id: relation._id,\r\n  });\r\n  // console.log(`Relation -> boardRelationId`, boardRelation._id);\r\n\r\n  useEffect(() => {\r\n    addBoardsNames();\r\n  }, []);\r\n  const editRelation = async () => {\r\n    const simpSubBoards = boardRelation.subBoards.map((sub) =>\r\n      Number(sub.value)\r\n    );\r\n    const res = await boardService.update(\r\n      Number(boardRelation.mainBoard.value),\r\n      simpSubBoards,\r\n      userId,\r\n      boardRelation._id\r\n    );\r\n    // setBoardRelation(res);\r\n    addBoardsNames(res);\r\n  };\r\n  const addBoardsNames = (object = relation) => {\r\n    const tempRelation = {\r\n      mainBoard: { value: 0, label: \"\" },\r\n      subBoards: [],\r\n      _id: relation._id,\r\n      userId: boardRelation.userId,\r\n    };\r\n    tempRelation.mainBoard = boards?.filter(\r\n      (board) => board.value == object.mainBoard\r\n    )[0];\r\n    tempRelation.subBoards = object?.subBoards.map(\r\n      (subBoard) =>\r\n        boards?.filter((board) => Number(board.value) === subBoard)[0]\r\n    );\r\n\r\n    // console.log(`addBoardsNames -> tempRelation`, tempRelation);\r\n    setBoardRelation(tempRelation);\r\n  };\r\n  const onSetRelation = (kind, newBoards) => {\r\n    // console.log(`onSetRelation -> userId`, userId);\r\n    // console.log(`onSetRelation -> newBoards`, newBoards);\r\n    let newRelation = {\r\n      userId: userId,\r\n      mainBoard: boardRelation.mainBoard,\r\n      subBoards: boardRelation.subBoards,\r\n      _id: relation._id,\r\n    };\r\n    if (kind === \"sub\") {\r\n      newRelation.subBoards = newBoards;\r\n    } else {\r\n      newRelation.mainBoard = newBoards;\r\n    }\r\n    setBoardRelation(newRelation);\r\n    // console.log(`onSetRelation -> newRelation`, newRelation);\r\n  };\r\n\r\n  return (\r\n    // <div className=\"relation\">\r\n    <div className=\"content\">\r\n      <Select\r\n        placeholder=\"Choose a main board\"\r\n        value={boardRelation.mainBoard}\r\n        options={boardNames}\r\n        defaultValue={boardRelation.mainBoard}\r\n        // isDisabled={edit}\r\n        onChange={(boards) => onSetRelation(\"main\", boards)}\r\n      />\r\n      <Select\r\n        isMulti\r\n        placeholder=\"Choose sub boards\"\r\n        value={boardRelation.subBoards}\r\n        options={boardNames}\r\n        defaultValue={boardRelation.subBoards}\r\n        onChange={(boards) => onSetRelation(\"sub\", boards)}\r\n      />\r\n      <button className=\"add-button\" onClick={editRelation}>\r\n        Update\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div>\r\n      <img\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/c/c7/Loading_2.gif\"\r\n        className=\"loader\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport \"monday-ui-react-core/dist/main.css\";\r\nimport boardService from \"./services/boardService\";\r\nimport Select from \"react-select\";\r\nimport Relation from \"./cmps/Relation\";\r\nimport Loader from \"./cmps/Loader\";\r\n\r\n//Explore more Monday React Components here: https://style.monday.com/\r\n// import AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\";\r\n// import Button from \"monday-ui-react-core/dist/Button.js\";\r\n// import MenuButton from \"monday-ui-react-core/dist/MenuButton.js\";\r\n// import { FontIcon } from \"office-ui-fabric-react/lib/Icon\";\r\n\r\nconst monday = mondaySdk();\r\n\r\nexport default function App() {\r\n  const [boards, setBoards] = useState();\r\n  const [fatherBoard, setFatherBoard] = useState();\r\n  const [childBoards, setChildBoards] = useState([]);\r\n  const [userId, setUserId] = useState();\r\n  const [relations, setRelations] = useState([]);\r\n  const [loading, SetLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getContext();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBoard();\r\n  }, [fatherBoard]);\r\n  useEffect(() => {\r\n    userId && boards && getBoardRelations();\r\n  }, [userId, boards]);\r\n  // useEffect(() => {}, []);\r\n  const getContext = async () => {\r\n    const context = await monday.get(\"context\");\r\n    setUserId(Number(context.data.user.id));\r\n    try {\r\n      const query = `query{\r\n        boards(limit:2000){\r\n          id\r\n          name\r\n        }\r\n      }`;\r\n      const res = await monday.api(query);\r\n      // console.log(`getContext -> res`, res.data);\r\n      const labeledBoards = res?.data?.boards?.map((board) => {\r\n        return { value: board.id, label: board.name };\r\n      });\r\n      // console.log(`labeledBoards -> labeledBoards`, labeledBoards);\r\n      setBoards(labeledBoards);\r\n    } catch (err) {\r\n      console.log(`getContext -> err`, err);\r\n    }\r\n  };\r\n\r\n  const getBoardRelations = async () => {\r\n    const boardRelations = await boardService.getUserBoards(userId);\r\n    // console.log(`getBoardRelations -> boardRelations`, boardRelations);\r\n    setRelations(boardRelations?.data);\r\n    SetLoading(false);\r\n  };\r\n  const getBoard = async () => {\r\n    const selected = boards?.find((board) => board.name === fatherBoard);\r\n    // console.log(`getBoard -> selected`, selected);\r\n  };\r\n  const onSetFatherBoard = (board) => {\r\n    setFatherBoard(board);\r\n  };\r\n\r\n  const onSetChildBoards = (chosenBoards) => {\r\n    setChildBoards(chosenBoards);\r\n  };\r\n  const addBoardsRelations = async () => {\r\n    const subIds = childBoards.map((board) => Number(board.value));\r\n    // console.log(\r\n    //   `addBoardsRelations -> fatherBoard, childBoards, userId`,\r\n    //   fatherBoard.value,\r\n    //   subIds,\r\n    //   userId\r\n    // );\r\n    const newRelation = await boardService.add(\r\n      Number(fatherBoard.value),\r\n      subIds,\r\n      userId\r\n    );\r\n    setRelations([...relations, newRelation]);\r\n  };\r\n\r\n  // const fatherBoardName = {\r\n  //   value: fatherBoard?.value,\r\n  //   label: fatherBoard?.label || \"Choose a main board\",\r\n  // };\r\n  const boardNames = boards?.filter(\r\n    (board) => board?.value !== fatherBoard?.value\r\n  );\r\n  // console.log(`App -> boardNames`, boardNames);\r\n  // const childBoardNames = childBoards?.filter((child) => {\r\n  //   return { label: child.name, value: child.id };\r\n  // });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <div className=\"content\">\r\n            <h1>Create new relation</h1>\r\n            {boards && (\r\n              <div>\r\n                <Select\r\n                  placeholder=\"Choose a main board\"\r\n                  value={fatherBoard}\r\n                  options={boardNames}\r\n                  onChange={(board) => onSetFatherBoard(board)}\r\n                />\r\n                <Select\r\n                  isMulti\r\n                  placeholder=\"Choose sub boards\"\r\n                  value={childBoards}\r\n                  options={boardNames}\r\n                  onChange={(board) => onSetChildBoards(board)}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <button className=\"add-button\" onClick={addBoardsRelations}>\r\n              Add boards relation\r\n            </button>\r\n          </div>\r\n          {/* <button onClick={addBoardsNames}>names</button> */}\r\n          <div className=\"edit-boards\">\r\n            <h1> edit existing relations</h1>\r\n            {relations &&\r\n              relations?.map((relation, i) => (\r\n                <Relation\r\n                  key={i}\r\n                  relation={relation}\r\n                  boardNames={boardNames}\r\n                  boards={boards}\r\n                  userId={userId}\r\n                />\r\n              ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}