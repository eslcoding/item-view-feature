{"version":3,"sources":["assets/img/esl-logo.jpg","services/userService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BASE_URL","domain","email","a","fetch","method","body","JSON","stringify","headers","res","json","console","dir","log","boardId","groupId","itemId","process","setStartItem","isUserExist","monday","require","mondaySdk","App","state","settings","name","color","isShowTxt","setItemToStart","get","data","query","api","me","userService","userTest","error","setState","groups","boards","find","group","items","some","item","id","window","open","className","FontIcon","iconName","this","onClick","navToStore","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ab5c9dec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/esl-logo.90002ad2.jpg\";","// const domain = process.env.NODE_ENV === 'production' ? 'https://monday-outlook.herokuapp.com' : 'http://localhost:3030'\nconst domain = process.env.NODE_ENV === 'production' ? 'https://outaddin-dev.herokuapp.com' : 'http://localhost:3030'\n// const domain = 'https://d85e647667cc.ngrok.io'\nconst BASE_URL = domain + '/api'\n\n\nasync function isUserExist(email) {\n    try {\n        let res = await fetch(BASE_URL + \"/user/isUserExist\", {\n            method: 'post',\n            body: JSON.stringify({ email: 'anistav1@outlook.com' }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n            \n\n        });\n        res = await res.json();\n        return res\n\n\n    } catch (err) {\n        console.dir(err)\n        console.log('ERROR: cannot fetch from server', err);\n    }\n\n}\n\nasync function setStartItem(email, boardId, groupId, itemId) {\n    // console.log('getUserByEmail -> email', email)\n    console.log('process.env.NODE_ENV: ', process.env.NODE_ENV);\n\n    console.log('email, boardId, groupId, itemId: ', email, boardId, groupId, itemId);\n\n    try {\n        let res = await fetch(BASE_URL + \"/user/setStartItem\", {\n            method: 'post',\n            body: JSON.stringify({ email, boardId, groupId, itemId }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n\n        });\n        res = await res.json();\n        console.log('setStartItem -> res', res)\n        return res\n\n\n    } catch (err) {\n        console.dir(err)\n        console.log('ERROR: cannot fetch from server', err);\n    }\n}\n\nexport default {\n    setStartItem,\n    isUserExist\n}","import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\nimport userService from './services/userService'\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\"\nimport Button from \"monday-ui-react-core/dist/Button.js\"\nimport MenuButton from \"monday-ui-react-core/dist/MenuButton.js\"\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\n\nconst img = require('./assets/img/esl-logo.jpg')\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n\n\n  // Default state\n  state = {\n    settings: {},\n    name: \"\",\n    color: 'primary',\n    isShowTxt: false,\n    isUserExist: true\n\n  };\n\n  navToStore(){\n    window.open('https://appsource.microsoft.com/en-us/product/office/WA200002596?tab=Overview')\n  }\n\n  setItemToStart = async () => {\n    if (!this.state.isUserExist || this.state.color==='positive') return\n    try {\n\n\n      const { data: { boardId, itemId } } = await monday.get('context')\n      // var { data: { boardIds, itemIds } } = await monday.get('context')\n      // const [boardId, itemId] = [boardIds[0], itemIds[0]]\n      const query = `query {\n      boards (ids: ${boardId}) {\n        name\n        groups {\n          id\n          items{\n            id\n            name\n          }\n        }\n      }\n      me { \n        name\n        email\n      }\n      \n    }`\n      const res = await monday.api(query)\n      const { me: { email } } = res.data\n      const userTest = await userService.isUserExist(email)\n      console.log('setItemToStart= -> userTest', userTest)\n      if (!userTest || userTest?.error) {\n        this.setState({ isUserExist: false,  color:'negative'})\n        return\n      }\n      console.log('setItemToStart= -> userTest', userTest)\n      const { groups } = res.data.boards[0]\n\n      // const groupId = groups.find(group => group.items.some(item => +item.id === itemId)).id\n      const groupId = groups.find(group => group.items.some(item => +item.id === itemId)).id\n\n      // userService.setStartItem(email, boardId, groupId, itemId)\n      await userService.setStartItem(email, boardId, groupId, itemId)\n      this.setState({ ...this.state, color: 'positive', isShowTxt: !this.state.isShowTxt })\n\n    } catch (err) {\n      console.log('err check if user exist: ', err);\n\n    }\n\n\n  }\n\n\n  componentDidMount() {\n    // TODO: set up event listeners\n  }\n\n  render() {\n    return <div className=\"App\">\n      <section className=\"app-link\">\n      <FontIcon className=\"btn-icon\" iconName=\"Refresh\" color=\"blue\">Refresh</FontIcon>\n        <h3>ESL's monday.com for outlook</h3>\n        <Button color={this.state.color} className=\"success\" onClick={this.setItemToStart}>Work on this item from Outlook</Button>\n        {this.state.isShowTxt && <div><p>Job done! This item has been set as your last state</p><p>Please click the refresh button to view it with in outlook</p></div>}\n        {!this.state.isUserExist && <div>\n          <p>We're sorry, but it seems like you are not registerd in ESl's monday.com for outlook</p>\n          <p>Please click the <span onClick={this.navToStore}>here</span> to sign in</p>\n        </div>}\n      </section>\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}